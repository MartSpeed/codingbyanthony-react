{"ast":null,"code":"var _jsxFileName = \"Q:\\\\javascript\\\\react_project\\\\sockets_with_reactjs\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport io from 'socket.io-client';\nimport { useEffect, useState } from 'react';\n\n// use this to emit or listen to events\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:3001\");\nfunction App() {\n  _s();\n  // Room State\n  const [room, setRoom] = useState(\"\");\n\n  // Message states\n  const [message, setMessage] = useState(\"\");\n  // grabs whatever the user is typing in the input\n  const [messageReceived, setMessageReceived] = useState(\"\");\n  const sendMessage = () => {\n    // emit message to someone or something\n    socket.emit(\"send_message\", {\n      message\n    });\n  }; // called when button is clicked\n\n  // setup the connection to our socket.io server on the backend\n\n  // function that will run, any time an event is thrown to us on the socket.io server\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setMessageReceived(data.message);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Message...\",\n      onChange: event => {\n        setMessage(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \" Send Message \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), messageReceived]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"ZdKt/j8WlpNmwOxrWqm2c6rJW74=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["io","useEffect","useState","socket","connect","App","room","setRoom","message","setMessage","messageReceived","setMessageReceived","sendMessage","emit","on","data","event","target","value"],"sources":["Q:/javascript/react_project/sockets_with_reactjs/client/src/App.js"],"sourcesContent":["import './App.css';\r\nimport io from 'socket.io-client';\r\nimport { useEffect, useState } from 'react'\r\n\r\n// use this to emit or listen to events\r\nconst socket = io.connect(\"http://localhost:3001\");\r\n\r\n\r\n\r\nfunction App () {\r\n    // Room State\r\n    const [room, setRoom] = useState(\"\");\r\n\r\n    // Message states\r\n    const [message, setMessage] = useState(\"\");\r\n    // grabs whatever the user is typing in the input\r\n    const [messageReceived, setMessageReceived] = useState(\"\"); \r\n    \r\n    const sendMessage = () => {\r\n        // emit message to someone or something\r\n        socket.emit(\"send_message\", { message })\r\n    }; // called when button is clicked\r\n\r\n    // setup the connection to our socket.io server on the backend\r\n\r\n    // function that will run, any time an event is thrown to us on the socket.io server\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data) => {\r\n            setMessageReceived(data.message)\r\n        })\r\n    })\r\n    return (\r\n        \r\n        <div className=\"App\">\r\n\r\n            <input \r\n                placeholder=\"Message...\" \r\n                onChange={(event) => {\r\n                    setMessage(event.target.value);\r\n                }}>\r\n\r\n            </input>\r\n\r\n            <button onClick={sendMessage}> Send Message </button>\r\n            <h1>Message:</h1>\r\n            { messageReceived }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,EAAE,MAAM,kBAAkB;AACjC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAE3C;AAAA;AACA,MAAMC,MAAM,GAAGH,EAAE,CAACI,OAAO,CAAC,uBAAuB,CAAC;AAIlD,SAASC,GAAG,GAAI;EAAA;EACZ;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C;EACA,MAAM,CAACQ,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMU,WAAW,GAAG,MAAM;IACtB;IACAT,MAAM,CAACU,IAAI,CAAC,cAAc,EAAE;MAAEL;IAAQ,CAAC,CAAC;EAC5C,CAAC,CAAC,CAAC;;EAEH;;EAEA;EACAP,SAAS,CAAC,MAAM;IACZE,MAAM,CAACW,EAAE,CAAC,iBAAiB,EAAGC,IAAI,IAAK;MACnCJ,kBAAkB,CAACI,IAAI,CAACP,OAAO,CAAC;IACpC,CAAC,CAAC;EACN,CAAC,CAAC;EACF,oBAEI;IAAK,SAAS,EAAC,KAAK;IAAA,wBAEhB;MACI,WAAW,EAAC,YAAY;MACxB,QAAQ,EAAGQ,KAAK,IAAK;QACjBP,UAAU,CAACO,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;MAClC;IAAE;MAAA;MAAA;MAAA;IAAA,QAEE,eAER;MAAQ,OAAO,EAAEN,WAAY;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAwB,eACrD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiB,EACfF,eAAe;EAAA;IAAA;IAAA;IAAA;EAAA,QACf;AAEd;AAAC,GAvCQL,GAAG;AAAA,KAAHA,GAAG;AAyCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}